{"version":3,"sources":["webpack:///../CONTRIBUTING.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,iMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,gDACA,sBACE,kBAAIC,WAAW,MAAf,wBAA6C,0BAAYA,WAAW,MAAvB,sBAC7C,kBAAIA,WAAW,MAAf,iHACA,kBAAIA,WAAW,MAAf,YAAiC,8BAAa,0BAAYA,WAAW,MAAvB,gBAAb,KAAjC,qEACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAQ,0BAAYA,WAAW,MAAvB,kBAApC,yEACA,kBAAIA,WAAW,MAAf,gGAAqH,0BAAYA,WAAW,MAAvB,MAArH,YAEF,iBAAQ,CACN,GAAM,+BADR,+BAGA,+BAAc,0BAAYA,WAAW,KAAvB,YAAd,kBAAqF,0BAAYA,WAAW,KAAvB,UAArF,+CACA,iBAAQ,CACN,GAAM,iBADR,kBAGA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sGAA0H,mBAAGA,WAAW,KAAQ,CAC5I,KAAQ,6CAD8G,oCAA1H,MAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,oDAAwE,8CAAxE,gCAA8I,0BAAYA,WAAW,KAAvB,uBAEhJ,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,8CAAkE,sCAAlE,QAAwG,oCAAxG,oEAAwM,oCAAxM,4CAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,8EAAkG,mBAAGA,WAAW,KAAQ,CACpH,KAAQ,yDADsF,qBAIpG,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,4BAAgD,0BAAQ,0BAAYA,WAAW,KAAvB,0BAAxD,mEAAsM,0BAAYA,WAAW,KAAvB,QAAtM,0KAAia,mBAAGA,WAAW,KAAQ,CACnb,KAAQ,6CADqZ,4CAAja,2BAIF,kBAAIA,WAAW,MACb,wCADF,qCAC+D,sDAE/D,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,yHAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,mJAAwK,0BAAYA,WAAW,KAAvB,mBAAxK,4FAAiU,0BAAYA,WAAW,KAAvB,qCAAjU,qBAAoa,0BAAYA,WAAW,KAAvB,iCAApa,+CAA6hB,0BAAYA,WAAW,KAAvB,qCAA7hB,mFAA8rB,0BAAYA,WAAW,KAAvB,kDAA9rB,kCAA2zB,0BAAYA,WAAW,KAAvB,0BAA3zB,0KAGJ,iBAAQ,CACN,GAAM,iBADR,iBAGA,+BAAc,mBAAGA,WAAW,KAAQ,CAChC,KAAQ,uBADE,QAAd,uDAEyE,mBAAGA,WAAW,KAAQ,CAC3F,KAAQ,8BAD6D,UAFzE,kDAIsE,mBAAGA,WAAW,KAAQ,CACxF,KAAQ,+CAD0D,kBAJtE,2DAOA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gCACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,IAA3B,iBAGvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,8CACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,IAA3B,wBAIzB,iBAAQ,CACN,GAAM,SADR,SAGA,0EACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,iBAEL,0DAAyC,0BAAYA,WAAW,KAAvB,SAAzC,4CAAuI,mBAAGA,WAAW,KAAQ,CACzJ,KAAQ,oDAD2H,eAAvI,wDAGA,iBAAQ,CACN,GAAM,WADR,WAGA,wEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mBAEL,wH,wLAKJJ,EAAWK,gBAAiB","file":"component---contributing-md-38313b369484e1139c4c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/repos/web/ui-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`All you need to do is :`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a file called `}<inlineCode parentName=\"li\">{`yourComponent.mdx`}</inlineCode></li>\n      <li parentName=\"ul\">{`Import your component and start specifying its behaviour (its basic usage with defaults, specified props ...)`}</li>\n      <li parentName=\"ul\">{`Add Docz `}<strong>{` `}<inlineCode parentName=\"li\">{`<Playground>`}</inlineCode>{` `}</strong>{` built-in component to enable live code testing on your component`}</li>\n      <li parentName=\"ul\">{`Run `}<strong><inlineCode parentName=\"li\">{`yarn docz:dev`}</inlineCode></strong>{` in order to start a local server of our documented ui-components lib`}</li>\n      <li parentName=\"ul\">{`Visualize your documentation: You can play/live test the components behaviour by clicking on `}<inlineCode parentName=\"li\">{`<>`}</inlineCode>{` button`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"code-linting-and-formatting\"\n    }}>{`Code linting and formatting`}</h3>\n    <p>{`We use `}<inlineCode parentName=\"p\">{`prettier`}</inlineCode>{` to format and `}<inlineCode parentName=\"p\">{`eslint`}</inlineCode>{` with typescript settings to lint our code.`}</p>\n    <h3 {...{\n      \"id\": \"good-to-know-\"\n    }}>{`Good to know :`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It's convenient to configure your ide in order automatically format your files. Please follow this `}<a parentName=\"p\" {...{\n            \"href\": \"https://prettier.io/docs/en/editors.html\"\n          }}>{`Editor Integration documentation`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Otherwise, we have a yarn task that formats your `}<strong>{`git staged files`}</strong>{` for you. You can simply run `}<inlineCode parentName=\"p\">{`yarn pretty-quick`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We also have an automatic task that runs a `}<strong>{`prettier`}</strong>{` and `}<strong>{`eslint`}</strong>{` check on git staged files everytime you attempt to create a new `}<strong>{`commit`}</strong>{` in order to be sure that things are OK`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A check on the message format is executed as well on commit-msg hook using `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/conventional-changelog/commitlint\"\n          }}>{`commitlint tool`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`we also execute the task `}<strong><inlineCode parentName=\"p\">{`yarn exec-docz-update`}</inlineCode></strong>{` on post-commit that will check if we have added or updated any `}<inlineCode parentName=\"p\">{`Docz`}</inlineCode>{` documentation (by modifying or adding any .mdx file), regenerate new built documentation and add push it through a new dedicated commit : in this way, we assure that `}<a parentName=\"p\" {...{\n            \"href\": \"https://dashlane.github.io/ui-components\"\n          }}>{`https://dashlane.github.io/ui-components`}</a>{` is always up to date.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <strong>Jest tests</strong> are run everytime you attempt to <strong>push new code on remote</strong>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Theses checks/rules are quite strict but very beneficial: they protect us from having :poop: slip into our code base`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In order to avoid repetitive/manual work to create svg icons components (since they are all similar only the content of the svg changes `}{`[see `}<inlineCode parentName=\"p\">{`src/atoms/icons`}</inlineCode>{` folder]`}{`), we choose to generate them. All you need to do is to update/add content in `}<inlineCode parentName=\"p\">{`src/design-tokens/icons-defs.json`}</inlineCode>{` and run the task `}<inlineCode parentName=\"p\">{`yarn generate-icon-components`}</inlineCode>{`. This commandline runs a script located in `}<inlineCode parentName=\"p\">{`config/generator/generateIcons.js`}</inlineCode>{` that generates all specified icons in the json mentioned earlier following the `}<inlineCode parentName=\"p\">{`config/generator/IconComponentTemplate.tsx.hbs`}</inlineCode>{` template. It also updates the `}<inlineCode parentName=\"p\">{`src/atoms/svg/index.ts`}</inlineCode>{` to export the generated components. Note: this process is safe: no duplicated components/exports will be generated (if files already exist they will be overridden)`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running tests`}</h3>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{` as testing framework and assertion library. We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://airbnb.io/enzyme/\"\n      }}>{`Enzyme`}</a>{` as a testing utility for react components and `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/docs/en/snapshot-testing\"\n      }}>{`snapshot tests`}</a>{` to make sure that our UI does not change unexpectedly.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To run tests, please execute`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`yarn test\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To run tests in watch mode, please execute`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`yarn test:watch\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"build\"\n    }}>{`Build`}</h2>\n    <p>{`In order to build this library you can simply run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn build\n`}</code></pre>\n    <p>{`which will generate in the folder `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` a transpiled and minified components as `}<a parentName=\"p\" {...{\n        \"href\": \"https://rollupjs.org/guide/en/#es-module-syntax\"\n      }}>{`ES6 modules`}</a>{` (to allow tree-shaking) with the associated typing.`}</p>\n    <h2 {...{\n      \"id\": \"release\"\n    }}>{`Release`}</h2>\n    <p>{`In order to relase and publish the library, run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn release\n`}</code></pre>\n    <p>{`This will build your project, automaticaly assign a new version to the package and publish it.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}